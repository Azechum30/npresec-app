generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String       @id @default(cuid())
  email                 String       @unique
  username              String       @unique
  password              String?
  roleId                String?
  resetPasswordRequired Boolean      @default(true)
  picture               String?
  session               Session[]
  student               Student?
  teacher               Teacher?
  role                  Role?        @relation(fields: [roleId], references: [id])
  permissions           Permission[] @relation("UserPermissions")

  @@index([roleId, email, username])
  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Department {
  id          String    @id @default(cuid())
  name        String    @unique
  code        String    @unique
  description String?
  headId      String?   @unique
  createdAt   DateTime  @default(now())
  updatedat   DateTime  @updatedAt
  classes     Class[]
  head        Teacher?  @relation("Head", fields: [headId], references: [id])
  students    Student[]
  teachers    Teacher[] @relation("DepartmentTeachers")
  courses     Course[]  @relation("CourseDepartments")

  @@index([name, code])
  @@map("departments")
}

model Teacher {
  id                     String      @id @default(cuid())
  employeeId             String      @unique
  userId                 String?     @unique
  departmentId           String?
  firstName              String
  lastName               String
  middleName             String?
  birthDate              DateTime
  dateOfFirstAppointment DateTime?
  gender                 String
  maritalStatus          String
  rgNumber               String?     @unique
  rank                   String?
  academicQual           String?
  ssnitNumber            String?     @unique
  ghcardNumber           String?     @unique
  phone                  String
  licencedNumber         String?     @unique
  departmentHead         Department? @relation("Head")
  department             Department? @relation("DepartmentTeachers", fields: [departmentId], references: [id])
  user                   User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes                Class[]     @relation("ClassTeachers")
  courses                Course[]    @relation("CourseTeachers")

  @@index([employeeId, firstName, lastName, gender])
  @@map("teachers")
}

model Course {
  id          String       @id @default(cuid())
  code        String       @unique
  title       String       @unique
  description String?
  credits     Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  grades      Grade[]
  classes     Class[]      @relation("ClassCourses")
  departments Department[] @relation("CourseDepartments")
  teachers    Teacher[]    @relation("CourseTeachers")

  @@index([code, title])
  @@map("courses")
}

model Class {
  id           String       @id @default(cuid())
  name         String       @unique
  code         String       @unique
  level        Level        @default(Year_One)
  teacherId    String?
  departmentId String?
  attendance   Attendance[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  department   Department?  @relation(fields: [departmentId], references: [id])
  students     Student[]
  courses      Course[]     @relation("ClassCourses")
  teachers     Teacher[]    @relation("ClassTeachers")

  @@index([code, name])
  @@map("classes")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  permissions Permission[] @relation("RolePermissions")

  @@index([name])
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("RolePermissions")
  users       User[]   @relation("UserPermissions")

  @@index([name])
  @@map("permissions")
}

model Student {
  id               String           @id @default(cuid())
  firstName        String
  lastName         String
  middleName       String?
  studentNumber    String           @unique
  birthDate        DateTime
  gender           String
  departmentId     String?
  userId           String?          @unique
  classId          String?
  dateEnrolled     DateTime         @default(now())
  graduationDate   DateTime?
  currentLevel     Level            @default(Year_One)
  status           EnrollmentStatus @default(Active)
  phone            String?
  address          String?
  nationality      String?
  religion         String?
  guardianName     String
  guardianPhone    String
  guardianEmail    String?
  guardianAddress  String?
  guardianRelation String
  previousSchool   String?
  admissionDate    DateTime         @default(now())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  attendance       Attendance[]
  documents        Document[]
  grades           Grade[]
  currentClass     Class?           @relation(fields: [classId], references: [id])
  department       Department?      @relation(fields: [departmentId], references: [id])
  user             User?            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([departmentId, currentLevel])
  @@index([firstName, lastName, studentNumber])
  @@index([currentLevel, status])
  @@map("students")
}

model Attendance {
  id           String           @id @default(cuid())
  date         DateTime         @db.Date
  status       AttendanceStatus
  semester     Semester?
  academicYear String?
  studentId    String
  classId      String
  student      Student          @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class        Class            @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([studentId, date, classId])
  @@unique([studentId, date])
  @@map("attendance")
}

model Grade {
  id        String   @id @default(cuid())
  courseId  String?
  studentId String?
  score     Float
  semester  Semester
  year      Int
  course    Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  student   Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId, semester, year])
  @@map("grades")
}

model Document {
  id         String   @id @default(cuid())
  name       String
  type       String
  url        String
  studentId  String?
  uploadedAt DateTime @default(now())
  student    Student? @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("documents")
}

enum Semester {
  First
  Second
}

enum AttendanceStatus {
  Present
  Absent
  Late
  Excused
}

enum Level {
  Year_One
  Year_Two
  Year_Three
}

enum EnrollmentStatus {
  Active
  Inactive
  Suspended
  Graduated
  Withdrawn
}
