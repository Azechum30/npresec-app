// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  username              String    @unique
  password              String?
  resetPasswordRequired Boolean   @default(true)
  role                  Role      @default(student)
  picture               String?
  teacher               Teacher?
  session               Session[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Department {
  id          String    @id @default(cuid())
  name        String    @unique
  code        String    @unique
  description String?
  headId      String?   @unique
  classes     Class[]
  courses     Course[]
  teachers    Teacher[] @relation("DepartmentTeachers")
  head        Teacher?  @relation("Head", fields: [headId], references: [id], onDelete: SetNull)
  createdAt   DateTime  @default(now())
  updatedat   DateTime  @updatedAt

  @@map("departments")
}

model Teacher {
  id                     String         @id @default(cuid())
  employeeId             String         @unique
  userId                 String?        @unique
  departmentId           String?
  courses                Course[]
  classes                TeacherClass[]
  departmentHead         Department?    @relation("Head")
  user                   User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  department             Department?    @relation("DepartmentTeachers", fields: [departmentId], references: [id], onDelete: SetNull)
  firstName              String
  lastName               String
  middleName             String?
  birthDate              DateTime
  dateOfFirstAppointment DateTime?
  gender                 String
  maritalStatus          String
  rgNumber               String?        @unique
  rank                   String?
  academicQual           String?
  ssnitNumber            String?        @unique
  ghcardNumber           String?        @unique
  phone                  String
  licencedNumber         String?        @unique

  @@map("teachers")
}

model Course {
  id           String     @id @default(cuid())
  code         String
  title        String
  description  String?
  credits      Int?
  departmentId String
  teacherId    String
  department   Department @relation(fields: [departmentId], references: [id])
  teacher      Teacher    @relation(fields: [teacherId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("courses")
}

model Class {
  id           String         @id @default(cuid())
  name         String         @unique
  code         String         @unique
  level        Grade          @default(Year_One)
  teacherId    String?
  teachers     TeacherClass[]
  departmentId String?
  department   Department?    @relation(fields: [departmentId], references: [id])
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("classes")
}

model TeacherClass {
  teacherId String
  classId   String
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  class     Class   @relation(fields: [classId], references: [id])

  @@id([teacherId, classId])
  @@map("teacher_classes")
}

enum Grade {
  Year_One
  Year_Two
  Year_Three
}

enum Role {
  admin
  student
  parent
  teacher
}
